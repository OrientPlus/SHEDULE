// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schedule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_schedule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_schedule_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_schedule_2eproto;
namespace schedule {
class Day;
struct DayDefaultTypeInternal;
extern DayDefaultTypeInternal _Day_default_instance_;
class Lecturer;
struct LecturerDefaultTypeInternal;
extern LecturerDefaultTypeInternal _Lecturer_default_instance_;
class ScheduleRequest;
struct ScheduleRequestDefaultTypeInternal;
extern ScheduleRequestDefaultTypeInternal _ScheduleRequest_default_instance_;
class ScheduleResponse;
struct ScheduleResponseDefaultTypeInternal;
extern ScheduleResponseDefaultTypeInternal _ScheduleResponse_default_instance_;
class Subject;
struct SubjectDefaultTypeInternal;
extern SubjectDefaultTypeInternal _Subject_default_instance_;
class TimeOfDay;
struct TimeOfDayDefaultTypeInternal;
extern TimeOfDayDefaultTypeInternal _TimeOfDay_default_instance_;
class TimeRange;
struct TimeRangeDefaultTypeInternal;
extern TimeRangeDefaultTypeInternal _TimeRange_default_instance_;
}  // namespace schedule
PROTOBUF_NAMESPACE_OPEN
template<> ::schedule::Day* Arena::CreateMaybeMessage<::schedule::Day>(Arena*);
template<> ::schedule::Lecturer* Arena::CreateMaybeMessage<::schedule::Lecturer>(Arena*);
template<> ::schedule::ScheduleRequest* Arena::CreateMaybeMessage<::schedule::ScheduleRequest>(Arena*);
template<> ::schedule::ScheduleResponse* Arena::CreateMaybeMessage<::schedule::ScheduleResponse>(Arena*);
template<> ::schedule::Subject* Arena::CreateMaybeMessage<::schedule::Subject>(Arena*);
template<> ::schedule::TimeOfDay* Arena::CreateMaybeMessage<::schedule::TimeOfDay>(Arena*);
template<> ::schedule::TimeRange* Arena::CreateMaybeMessage<::schedule::TimeRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace schedule {

enum Subject_SubjectType : int {
  Subject_SubjectType_LECTURE = 0,
  Subject_SubjectType_PRACTICE = 1,
  Subject_SubjectType_LAB = 2,
  Subject_SubjectType_Subject_SubjectType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Subject_SubjectType_Subject_SubjectType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Subject_SubjectType_IsValid(int value);
constexpr Subject_SubjectType Subject_SubjectType_SubjectType_MIN = Subject_SubjectType_LECTURE;
constexpr Subject_SubjectType Subject_SubjectType_SubjectType_MAX = Subject_SubjectType_LAB;
constexpr int Subject_SubjectType_SubjectType_ARRAYSIZE = Subject_SubjectType_SubjectType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Subject_SubjectType_descriptor();
template<typename T>
inline const std::string& Subject_SubjectType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Subject_SubjectType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Subject_SubjectType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Subject_SubjectType_descriptor(), enum_t_value);
}
inline bool Subject_SubjectType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Subject_SubjectType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Subject_SubjectType>(
    Subject_SubjectType_descriptor(), name, value);
}
// ===================================================================

class ScheduleRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.ScheduleRequest) */ {
 public:
  inline ScheduleRequest() : ScheduleRequest(nullptr) {}
  ~ScheduleRequest() override;
  explicit PROTOBUF_CONSTEXPR ScheduleRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleRequest(const ScheduleRequest& from);
  ScheduleRequest(ScheduleRequest&& from) noexcept
    : ScheduleRequest() {
    *this = ::std::move(from);
  }

  inline ScheduleRequest& operator=(const ScheduleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleRequest& operator=(ScheduleRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleRequest* internal_default_instance() {
    return reinterpret_cast<const ScheduleRequest*>(
               &_ScheduleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ScheduleRequest& a, ScheduleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleRequest& from) {
    ScheduleRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.ScheduleRequest";
  }
  protected:
  explicit ScheduleRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGroupFieldNumber = 1,
  };
  // string group = 1;
  void clear_group();
  const std::string& group() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_group(ArgT0&& arg0, ArgT... args);
  std::string* mutable_group();
  PROTOBUF_NODISCARD std::string* release_group();
  void set_allocated_group(std::string* group);
  private:
  const std::string& _internal_group() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_group(const std::string& value);
  std::string* _internal_mutable_group();
  public:

  // @@protoc_insertion_point(class_scope:schedule.ScheduleRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr group_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class ScheduleResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.ScheduleResponse) */ {
 public:
  inline ScheduleResponse() : ScheduleResponse(nullptr) {}
  ~ScheduleResponse() override;
  explicit PROTOBUF_CONSTEXPR ScheduleResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScheduleResponse(const ScheduleResponse& from);
  ScheduleResponse(ScheduleResponse&& from) noexcept
    : ScheduleResponse() {
    *this = ::std::move(from);
  }

  inline ScheduleResponse& operator=(const ScheduleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScheduleResponse& operator=(ScheduleResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScheduleResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScheduleResponse* internal_default_instance() {
    return reinterpret_cast<const ScheduleResponse*>(
               &_ScheduleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScheduleResponse& a, ScheduleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ScheduleResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScheduleResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ScheduleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ScheduleResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ScheduleResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ScheduleResponse& from) {
    ScheduleResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScheduleResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.ScheduleResponse";
  }
  protected:
  explicit ScheduleResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOddWeekFieldNumber = 1,
    kEvenWeekFieldNumber = 2,
  };
  // repeated .schedule.Day oddWeek = 1;
  int oddweek_size() const;
  private:
  int _internal_oddweek_size() const;
  public:
  void clear_oddweek();
  ::schedule::Day* mutable_oddweek(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >*
      mutable_oddweek();
  private:
  const ::schedule::Day& _internal_oddweek(int index) const;
  ::schedule::Day* _internal_add_oddweek();
  public:
  const ::schedule::Day& oddweek(int index) const;
  ::schedule::Day* add_oddweek();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >&
      oddweek() const;

  // repeated .schedule.Day evenWeek = 2;
  int evenweek_size() const;
  private:
  int _internal_evenweek_size() const;
  public:
  void clear_evenweek();
  ::schedule::Day* mutable_evenweek(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >*
      mutable_evenweek();
  private:
  const ::schedule::Day& _internal_evenweek(int index) const;
  ::schedule::Day* _internal_add_evenweek();
  public:
  const ::schedule::Day& evenweek(int index) const;
  ::schedule::Day* add_evenweek();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >&
      evenweek() const;

  // @@protoc_insertion_point(class_scope:schedule.ScheduleResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day > oddweek_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day > evenweek_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class Day final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.Day) */ {
 public:
  inline Day() : Day(nullptr) {}
  ~Day() override;
  explicit PROTOBUF_CONSTEXPR Day(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Day(const Day& from);
  Day(Day&& from) noexcept
    : Day() {
    *this = ::std::move(from);
  }

  inline Day& operator=(const Day& from) {
    CopyFrom(from);
    return *this;
  }
  inline Day& operator=(Day&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Day& default_instance() {
    return *internal_default_instance();
  }
  static inline const Day* internal_default_instance() {
    return reinterpret_cast<const Day*>(
               &_Day_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Day& a, Day& b) {
    a.Swap(&b);
  }
  inline void Swap(Day* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Day* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Day* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Day>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Day& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Day& from) {
    Day::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Day* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.Day";
  }
  protected:
  explicit Day(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubjectsFieldNumber = 2,
    kWeekdayFieldNumber = 1,
  };
  // repeated .schedule.Subject subjects = 2;
  int subjects_size() const;
  private:
  int _internal_subjects_size() const;
  public:
  void clear_subjects();
  ::schedule::Subject* mutable_subjects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Subject >*
      mutable_subjects();
  private:
  const ::schedule::Subject& _internal_subjects(int index) const;
  ::schedule::Subject* _internal_add_subjects();
  public:
  const ::schedule::Subject& subjects(int index) const;
  ::schedule::Subject* add_subjects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Subject >&
      subjects() const;

  // int32 weekday = 1;
  void clear_weekday();
  int32_t weekday() const;
  void set_weekday(int32_t value);
  private:
  int32_t _internal_weekday() const;
  void _internal_set_weekday(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:schedule.Day)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Subject > subjects_;
    int32_t weekday_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class Subject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.Subject) */ {
 public:
  inline Subject() : Subject(nullptr) {}
  ~Subject() override;
  explicit PROTOBUF_CONSTEXPR Subject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Subject(const Subject& from);
  Subject(Subject&& from) noexcept
    : Subject() {
    *this = ::std::move(from);
  }

  inline Subject& operator=(const Subject& from) {
    CopyFrom(from);
    return *this;
  }
  inline Subject& operator=(Subject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Subject& default_instance() {
    return *internal_default_instance();
  }
  static inline const Subject* internal_default_instance() {
    return reinterpret_cast<const Subject*>(
               &_Subject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Subject& a, Subject& b) {
    a.Swap(&b);
  }
  inline void Swap(Subject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Subject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Subject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Subject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Subject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Subject& from) {
    Subject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Subject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.Subject";
  }
  protected:
  explicit Subject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Subject_SubjectType SubjectType;
  static constexpr SubjectType LECTURE =
    Subject_SubjectType_LECTURE;
  static constexpr SubjectType PRACTICE =
    Subject_SubjectType_PRACTICE;
  static constexpr SubjectType LAB =
    Subject_SubjectType_LAB;
  static inline bool SubjectType_IsValid(int value) {
    return Subject_SubjectType_IsValid(value);
  }
  static constexpr SubjectType SubjectType_MIN =
    Subject_SubjectType_SubjectType_MIN;
  static constexpr SubjectType SubjectType_MAX =
    Subject_SubjectType_SubjectType_MAX;
  static constexpr int SubjectType_ARRAYSIZE =
    Subject_SubjectType_SubjectType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SubjectType_descriptor() {
    return Subject_SubjectType_descriptor();
  }
  template<typename T>
  static inline const std::string& SubjectType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SubjectType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SubjectType_Name.");
    return Subject_SubjectType_Name(enum_t_value);
  }
  static inline bool SubjectType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SubjectType* value) {
    return Subject_SubjectType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kRoomFieldNumber = 2,
    kLecturerFieldNumber = 4,
    kTimeRangeFieldNumber = 6,
    kTypeFieldNumber = 3,
    kNumberFieldNumber = 5,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string room = 2;
  void clear_room();
  const std::string& room() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_room(ArgT0&& arg0, ArgT... args);
  std::string* mutable_room();
  PROTOBUF_NODISCARD std::string* release_room();
  void set_allocated_room(std::string* room);
  private:
  const std::string& _internal_room() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_room(const std::string& value);
  std::string* _internal_mutable_room();
  public:

  // .schedule.Lecturer lecturer = 4;
  bool has_lecturer() const;
  private:
  bool _internal_has_lecturer() const;
  public:
  void clear_lecturer();
  const ::schedule::Lecturer& lecturer() const;
  PROTOBUF_NODISCARD ::schedule::Lecturer* release_lecturer();
  ::schedule::Lecturer* mutable_lecturer();
  void set_allocated_lecturer(::schedule::Lecturer* lecturer);
  private:
  const ::schedule::Lecturer& _internal_lecturer() const;
  ::schedule::Lecturer* _internal_mutable_lecturer();
  public:
  void unsafe_arena_set_allocated_lecturer(
      ::schedule::Lecturer* lecturer);
  ::schedule::Lecturer* unsafe_arena_release_lecturer();

  // .schedule.TimeRange timeRange = 6;
  bool has_timerange() const;
  private:
  bool _internal_has_timerange() const;
  public:
  void clear_timerange();
  const ::schedule::TimeRange& timerange() const;
  PROTOBUF_NODISCARD ::schedule::TimeRange* release_timerange();
  ::schedule::TimeRange* mutable_timerange();
  void set_allocated_timerange(::schedule::TimeRange* timerange);
  private:
  const ::schedule::TimeRange& _internal_timerange() const;
  ::schedule::TimeRange* _internal_mutable_timerange();
  public:
  void unsafe_arena_set_allocated_timerange(
      ::schedule::TimeRange* timerange);
  ::schedule::TimeRange* unsafe_arena_release_timerange();

  // .schedule.Subject.SubjectType type = 3;
  void clear_type();
  ::schedule::Subject_SubjectType type() const;
  void set_type(::schedule::Subject_SubjectType value);
  private:
  ::schedule::Subject_SubjectType _internal_type() const;
  void _internal_set_type(::schedule::Subject_SubjectType value);
  public:

  // int32 number = 5;
  void clear_number();
  int32_t number() const;
  void set_number(int32_t value);
  private:
  int32_t _internal_number() const;
  void _internal_set_number(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:schedule.Subject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr room_;
    ::schedule::Lecturer* lecturer_;
    ::schedule::TimeRange* timerange_;
    int type_;
    int32_t number_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class Lecturer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.Lecturer) */ {
 public:
  inline Lecturer() : Lecturer(nullptr) {}
  ~Lecturer() override;
  explicit PROTOBUF_CONSTEXPR Lecturer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lecturer(const Lecturer& from);
  Lecturer(Lecturer&& from) noexcept
    : Lecturer() {
    *this = ::std::move(from);
  }

  inline Lecturer& operator=(const Lecturer& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lecturer& operator=(Lecturer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lecturer& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lecturer* internal_default_instance() {
    return reinterpret_cast<const Lecturer*>(
               &_Lecturer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Lecturer& a, Lecturer& b) {
    a.Swap(&b);
  }
  inline void Swap(Lecturer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lecturer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lecturer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lecturer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lecturer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Lecturer& from) {
    Lecturer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lecturer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.Lecturer";
  }
  protected:
  explicit Lecturer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirstNameFieldNumber = 1,
    kLastNameFieldNumber = 2,
    kMiddleNameFieldNumber = 3,
  };
  // string firstName = 1;
  void clear_firstname();
  const std::string& firstname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_firstname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_firstname();
  PROTOBUF_NODISCARD std::string* release_firstname();
  void set_allocated_firstname(std::string* firstname);
  private:
  const std::string& _internal_firstname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_firstname(const std::string& value);
  std::string* _internal_mutable_firstname();
  public:

  // string lastName = 2;
  void clear_lastname();
  const std::string& lastname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_lastname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_lastname();
  PROTOBUF_NODISCARD std::string* release_lastname();
  void set_allocated_lastname(std::string* lastname);
  private:
  const std::string& _internal_lastname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_lastname(const std::string& value);
  std::string* _internal_mutable_lastname();
  public:

  // string middleName = 3;
  void clear_middlename();
  const std::string& middlename() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_middlename(ArgT0&& arg0, ArgT... args);
  std::string* mutable_middlename();
  PROTOBUF_NODISCARD std::string* release_middlename();
  void set_allocated_middlename(std::string* middlename);
  private:
  const std::string& _internal_middlename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_middlename(const std::string& value);
  std::string* _internal_mutable_middlename();
  public:

  // @@protoc_insertion_point(class_scope:schedule.Lecturer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firstname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lastname_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr middlename_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class TimeRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.TimeRange) */ {
 public:
  inline TimeRange() : TimeRange(nullptr) {}
  ~TimeRange() override;
  explicit PROTOBUF_CONSTEXPR TimeRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeRange(const TimeRange& from);
  TimeRange(TimeRange&& from) noexcept
    : TimeRange() {
    *this = ::std::move(from);
  }

  inline TimeRange& operator=(const TimeRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeRange& operator=(TimeRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeRange* internal_default_instance() {
    return reinterpret_cast<const TimeRange*>(
               &_TimeRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TimeRange& a, TimeRange& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeRange& from) {
    TimeRange::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.TimeRange";
  }
  protected:
  explicit TimeRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .schedule.TimeOfDay start = 1;
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::schedule::TimeOfDay& start() const;
  PROTOBUF_NODISCARD ::schedule::TimeOfDay* release_start();
  ::schedule::TimeOfDay* mutable_start();
  void set_allocated_start(::schedule::TimeOfDay* start);
  private:
  const ::schedule::TimeOfDay& _internal_start() const;
  ::schedule::TimeOfDay* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::schedule::TimeOfDay* start);
  ::schedule::TimeOfDay* unsafe_arena_release_start();

  // .schedule.TimeOfDay end = 2;
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::schedule::TimeOfDay& end() const;
  PROTOBUF_NODISCARD ::schedule::TimeOfDay* release_end();
  ::schedule::TimeOfDay* mutable_end();
  void set_allocated_end(::schedule::TimeOfDay* end);
  private:
  const ::schedule::TimeOfDay& _internal_end() const;
  ::schedule::TimeOfDay* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::schedule::TimeOfDay* end);
  ::schedule::TimeOfDay* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:schedule.TimeRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::schedule::TimeOfDay* start_;
    ::schedule::TimeOfDay* end_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// -------------------------------------------------------------------

class TimeOfDay final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:schedule.TimeOfDay) */ {
 public:
  inline TimeOfDay() : TimeOfDay(nullptr) {}
  ~TimeOfDay() override;
  explicit PROTOBUF_CONSTEXPR TimeOfDay(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TimeOfDay(const TimeOfDay& from);
  TimeOfDay(TimeOfDay&& from) noexcept
    : TimeOfDay() {
    *this = ::std::move(from);
  }

  inline TimeOfDay& operator=(const TimeOfDay& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimeOfDay& operator=(TimeOfDay&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TimeOfDay& default_instance() {
    return *internal_default_instance();
  }
  static inline const TimeOfDay* internal_default_instance() {
    return reinterpret_cast<const TimeOfDay*>(
               &_TimeOfDay_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TimeOfDay& a, TimeOfDay& b) {
    a.Swap(&b);
  }
  inline void Swap(TimeOfDay* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TimeOfDay* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TimeOfDay* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TimeOfDay>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TimeOfDay& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TimeOfDay& from) {
    TimeOfDay::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeOfDay* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "schedule.TimeOfDay";
  }
  protected:
  explicit TimeOfDay(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHourFieldNumber = 1,
    kMinuteFieldNumber = 2,
  };
  // int32 hour = 1;
  void clear_hour();
  int32_t hour() const;
  void set_hour(int32_t value);
  private:
  int32_t _internal_hour() const;
  void _internal_set_hour(int32_t value);
  public:

  // int32 minute = 2;
  void clear_minute();
  int32_t minute() const;
  void set_minut(int32_t value);
  private:
  int32_t _internal_minute() const;
  void _internal_set_minute(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:schedule.TimeOfDay)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t hour_;
    int32_t minute_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_schedule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ScheduleRequest

// string group = 1;
inline void ScheduleRequest::clear_group() {
  _impl_.group_.ClearToEmpty();
}
inline const std::string& ScheduleRequest::group() const {
  // @@protoc_insertion_point(field_get:schedule.ScheduleRequest.group)
  return _internal_group();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScheduleRequest::set_group(ArgT0&& arg0, ArgT... args) {
 
 _impl_.group_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.ScheduleRequest.group)
}
inline std::string* ScheduleRequest::mutable_group() {
  std::string* _s = _internal_mutable_group();
  // @@protoc_insertion_point(field_mutable:schedule.ScheduleRequest.group)
  return _s;
}
inline const std::string& ScheduleRequest::_internal_group() const {
  return _impl_.group_.Get();
}
inline void ScheduleRequest::_internal_set_group(const std::string& value) {
  
  _impl_.group_.Set(value, GetArenaForAllocation());
}
inline std::string* ScheduleRequest::_internal_mutable_group() {
  
  return _impl_.group_.Mutable(GetArenaForAllocation());
}
inline std::string* ScheduleRequest::release_group() {
  // @@protoc_insertion_point(field_release:schedule.ScheduleRequest.group)
  return _impl_.group_.Release();
}
inline void ScheduleRequest::set_allocated_group(std::string* group) {
  if (group != nullptr) {
    
  } else {
    
  }
  _impl_.group_.SetAllocated(group, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.group_.IsDefault()) {
    _impl_.group_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.ScheduleRequest.group)
}

// -------------------------------------------------------------------

// ScheduleResponse

// repeated .schedule.Day oddWeek = 1;
inline int ScheduleResponse::_internal_oddweek_size() const {
  return _impl_.oddweek_.size();
}
inline int ScheduleResponse::oddweek_size() const {
  return _internal_oddweek_size();
}
inline void ScheduleResponse::clear_oddweek() {
  _impl_.oddweek_.Clear();
}
inline ::schedule::Day* ScheduleResponse::mutable_oddweek(int index) {
  // @@protoc_insertion_point(field_mutable:schedule.ScheduleResponse.oddWeek)
  return _impl_.oddweek_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >*
ScheduleResponse::mutable_oddweek() {
  // @@protoc_insertion_point(field_mutable_list:schedule.ScheduleResponse.oddWeek)
  return &_impl_.oddweek_;
}
inline const ::schedule::Day& ScheduleResponse::_internal_oddweek(int index) const {
  return _impl_.oddweek_.Get(index);
}
inline const ::schedule::Day& ScheduleResponse::oddweek(int index) const {
  // @@protoc_insertion_point(field_get:schedule.ScheduleResponse.oddWeek)
  return _internal_oddweek(index);
}
inline ::schedule::Day* ScheduleResponse::_internal_add_oddweek() {
  return _impl_.oddweek_.Add();
}
inline ::schedule::Day* ScheduleResponse::add_oddweek() {
  ::schedule::Day* _add = _internal_add_oddweek();
  // @@protoc_insertion_point(field_add:schedule.ScheduleResponse.oddWeek)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >&
ScheduleResponse::oddweek() const {
  // @@protoc_insertion_point(field_list:schedule.ScheduleResponse.oddWeek)
  return _impl_.oddweek_;
}

// repeated .schedule.Day evenWeek = 2;
inline int ScheduleResponse::_internal_evenweek_size() const {
  return _impl_.evenweek_.size();
}
inline int ScheduleResponse::evenweek_size() const {
  return _internal_evenweek_size();
}
inline void ScheduleResponse::clear_evenweek() {
  _impl_.evenweek_.Clear();
}
inline ::schedule::Day* ScheduleResponse::mutable_evenweek(int index) {
  // @@protoc_insertion_point(field_mutable:schedule.ScheduleResponse.evenWeek)
  return _impl_.evenweek_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >*
ScheduleResponse::mutable_evenweek() {
  // @@protoc_insertion_point(field_mutable_list:schedule.ScheduleResponse.evenWeek)
  return &_impl_.evenweek_;
}
inline const ::schedule::Day& ScheduleResponse::_internal_evenweek(int index) const {
  return _impl_.evenweek_.Get(index);
}
inline const ::schedule::Day& ScheduleResponse::evenweek(int index) const {
  // @@protoc_insertion_point(field_get:schedule.ScheduleResponse.evenWeek)
  return _internal_evenweek(index);
}
inline ::schedule::Day* ScheduleResponse::_internal_add_evenweek() {
  return _impl_.evenweek_.Add();
}
inline ::schedule::Day* ScheduleResponse::add_evenweek() {
  ::schedule::Day* _add = _internal_add_evenweek();
  // @@protoc_insertion_point(field_add:schedule.ScheduleResponse.evenWeek)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Day >&
ScheduleResponse::evenweek() const {
  // @@protoc_insertion_point(field_list:schedule.ScheduleResponse.evenWeek)
  return _impl_.evenweek_;
}

// -------------------------------------------------------------------

// Day

// int32 weekday = 1;
inline void Day::clear_weekday() {
  _impl_.weekday_ = 0;
}
inline int32_t Day::_internal_weekday() const {
  return _impl_.weekday_;
}
inline int32_t Day::weekday() const {
  // @@protoc_insertion_point(field_get:schedule.Day.weekday)
  return _internal_weekday();
}
inline void Day::_internal_set_weekday(int32_t value) {
  
  _impl_.weekday_ = value;
}
inline void Day::set_weekday(int32_t value) {
  _internal_set_weekday(value);
  // @@protoc_insertion_point(field_set:schedule.Day.weekday)
}

// repeated .schedule.Subject subjects = 2;
inline int Day::_internal_subjects_size() const {
  return _impl_.subjects_.size();
}
inline int Day::subjects_size() const {
  return _internal_subjects_size();
}
inline void Day::clear_subjects() {
  _impl_.subjects_.Clear();
}
inline ::schedule::Subject* Day::mutable_subjects(int index) {
  // @@protoc_insertion_point(field_mutable:schedule.Day.subjects)
  return _impl_.subjects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Subject >*
Day::mutable_subjects() {
  // @@protoc_insertion_point(field_mutable_list:schedule.Day.subjects)
  return &_impl_.subjects_;
}
inline const ::schedule::Subject& Day::_internal_subjects(int index) const {
  return _impl_.subjects_.Get(index);
}
inline const ::schedule::Subject& Day::subjects(int index) const {
  // @@protoc_insertion_point(field_get:schedule.Day.subjects)
  return _internal_subjects(index);
}
inline ::schedule::Subject* Day::_internal_add_subjects() {
  return _impl_.subjects_.Add();
}
inline ::schedule::Subject* Day::add_subjects() {
  ::schedule::Subject* _add = _internal_add_subjects();
  // @@protoc_insertion_point(field_add:schedule.Day.subjects)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::schedule::Subject >&
Day::subjects() const {
  // @@protoc_insertion_point(field_list:schedule.Day.subjects)
  return _impl_.subjects_;
}

// -------------------------------------------------------------------

// Subject

// string name = 1;
inline void Subject::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Subject::name() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subject::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.Subject.name)
}
inline std::string* Subject::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:schedule.Subject.name)
  return _s;
}
inline const std::string& Subject::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Subject::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Subject::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Subject::release_name() {
  // @@protoc_insertion_point(field_release:schedule.Subject.name)
  return _impl_.name_.Release();
}
inline void Subject::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.Subject.name)
}

// string room = 2;
inline void Subject::clear_room() {
  _impl_.room_.ClearToEmpty();
}
inline const std::string& Subject::room() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.room)
  return _internal_room();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Subject::set_room(ArgT0&& arg0, ArgT... args) {
 
 _impl_.room_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.Subject.room)
}
inline std::string* Subject::mutable_room() {
  std::string* _s = _internal_mutable_room();
  // @@protoc_insertion_point(field_mutable:schedule.Subject.room)
  return _s;
}
inline const std::string& Subject::_internal_room() const {
  return _impl_.room_.Get();
}
inline void Subject::_internal_set_room(const std::string& value) {
  
  _impl_.room_.Set(value, GetArenaForAllocation());
}
inline std::string* Subject::_internal_mutable_room() {
  
  return _impl_.room_.Mutable(GetArenaForAllocation());
}
inline std::string* Subject::release_room() {
  // @@protoc_insertion_point(field_release:schedule.Subject.room)
  return _impl_.room_.Release();
}
inline void Subject::set_allocated_room(std::string* room) {
  if (room != nullptr) {
    
  } else {
    
  }
  _impl_.room_.SetAllocated(room, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.room_.IsDefault()) {
    _impl_.room_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.Subject.room)
}

// .schedule.Subject.SubjectType type = 3;
inline void Subject::clear_type() {
  _impl_.type_ = 0;
}
inline ::schedule::Subject_SubjectType Subject::_internal_type() const {
  return static_cast< ::schedule::Subject_SubjectType >(_impl_.type_);
}
inline ::schedule::Subject_SubjectType Subject::type() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.type)
  return _internal_type();
}
inline void Subject::_internal_set_type(::schedule::Subject_SubjectType value) {
  
  _impl_.type_ = value;
}
inline void Subject::set_type(::schedule::Subject_SubjectType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:schedule.Subject.type)
}

// .schedule.Lecturer lecturer = 4;
inline bool Subject::_internal_has_lecturer() const {
  return this != internal_default_instance() && _impl_.lecturer_ != nullptr;
}
inline bool Subject::has_lecturer() const {
  return _internal_has_lecturer();
}
inline void Subject::clear_lecturer() {
  if (GetArenaForAllocation() == nullptr && _impl_.lecturer_ != nullptr) {
    delete _impl_.lecturer_;
  }
  _impl_.lecturer_ = nullptr;
}
inline const ::schedule::Lecturer& Subject::_internal_lecturer() const {
  const ::schedule::Lecturer* p = _impl_.lecturer_;
  return p != nullptr ? *p : reinterpret_cast<const ::schedule::Lecturer&>(
      ::schedule::_Lecturer_default_instance_);
}
inline const ::schedule::Lecturer& Subject::lecturer() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.lecturer)
  return _internal_lecturer();
}
inline void Subject::unsafe_arena_set_allocated_lecturer(
    ::schedule::Lecturer* lecturer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lecturer_);
  }
  _impl_.lecturer_ = lecturer;
  if (lecturer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:schedule.Subject.lecturer)
}
inline ::schedule::Lecturer* Subject::release_lecturer() {
  
  ::schedule::Lecturer* temp = _impl_.lecturer_;
  _impl_.lecturer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::schedule::Lecturer* Subject::unsafe_arena_release_lecturer() {
  // @@protoc_insertion_point(field_release:schedule.Subject.lecturer)
  
  ::schedule::Lecturer* temp = _impl_.lecturer_;
  _impl_.lecturer_ = nullptr;
  return temp;
}
inline ::schedule::Lecturer* Subject::_internal_mutable_lecturer() {
  
  if (_impl_.lecturer_ == nullptr) {
    auto* p = CreateMaybeMessage<::schedule::Lecturer>(GetArenaForAllocation());
    _impl_.lecturer_ = p;
  }
  return _impl_.lecturer_;
}
inline ::schedule::Lecturer* Subject::mutable_lecturer() {
  ::schedule::Lecturer* _msg = _internal_mutable_lecturer();
  // @@protoc_insertion_point(field_mutable:schedule.Subject.lecturer)
  return _msg;
}
inline void Subject::set_allocated_lecturer(::schedule::Lecturer* lecturer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lecturer_;
  }
  if (lecturer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lecturer);
    if (message_arena != submessage_arena) {
      lecturer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lecturer, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.lecturer_ = lecturer;
  // @@protoc_insertion_point(field_set_allocated:schedule.Subject.lecturer)
}

// int32 number = 5;
inline void Subject::clear_number() {
  _impl_.number_ = 0;
}
inline int32_t Subject::_internal_number() const {
  return _impl_.number_;
}
inline int32_t Subject::number() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.number)
  return _internal_number();
}
inline void Subject::_internal_set_number(int32_t value) {
  
  _impl_.number_ = value;
}
inline void Subject::set_number(int32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:schedule.Subject.number)
}

// .schedule.TimeRange timeRange = 6;
inline bool Subject::_internal_has_timerange() const {
  return this != internal_default_instance() && _impl_.timerange_ != nullptr;
}
inline bool Subject::has_timerange() const {
  return _internal_has_timerange();
}
inline void Subject::clear_timerange() {
  if (GetArenaForAllocation() == nullptr && _impl_.timerange_ != nullptr) {
    delete _impl_.timerange_;
  }
  _impl_.timerange_ = nullptr;
}
inline const ::schedule::TimeRange& Subject::_internal_timerange() const {
  const ::schedule::TimeRange* p = _impl_.timerange_;
  return p != nullptr ? *p : reinterpret_cast<const ::schedule::TimeRange&>(
      ::schedule::_TimeRange_default_instance_);
}
inline const ::schedule::TimeRange& Subject::timerange() const {
  // @@protoc_insertion_point(field_get:schedule.Subject.timeRange)
  return _internal_timerange();
}
inline void Subject::unsafe_arena_set_allocated_timerange(
    ::schedule::TimeRange* timerange) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.timerange_);
  }
  _impl_.timerange_ = timerange;
  if (timerange) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:schedule.Subject.timeRange)
}
inline ::schedule::TimeRange* Subject::release_timerange() {
  
  ::schedule::TimeRange* temp = _impl_.timerange_;
  _impl_.timerange_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::schedule::TimeRange* Subject::unsafe_arena_release_timerange() {
  // @@protoc_insertion_point(field_release:schedule.Subject.timeRange)
  
  ::schedule::TimeRange* temp = _impl_.timerange_;
  _impl_.timerange_ = nullptr;
  return temp;
}
inline ::schedule::TimeRange* Subject::_internal_mutable_timerange() {
  
  if (_impl_.timerange_ == nullptr) {
    auto* p = CreateMaybeMessage<::schedule::TimeRange>(GetArenaForAllocation());
    _impl_.timerange_ = p;
  }
  return _impl_.timerange_;
}
inline ::schedule::TimeRange* Subject::mutable_timerange() {
  ::schedule::TimeRange* _msg = _internal_mutable_timerange();
  // @@protoc_insertion_point(field_mutable:schedule.Subject.timeRange)
  return _msg;
}
inline void Subject::set_allocated_timerange(::schedule::TimeRange* timerange) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.timerange_;
  }
  if (timerange) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timerange);
    if (message_arena != submessage_arena) {
      timerange = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timerange, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.timerange_ = timerange;
  // @@protoc_insertion_point(field_set_allocated:schedule.Subject.timeRange)
}

// -------------------------------------------------------------------

// Lecturer

// string firstName = 1;
inline void Lecturer::clear_firstname() {
  _impl_.firstname_.ClearToEmpty();
}
inline const std::string& Lecturer::firstname() const {
  // @@protoc_insertion_point(field_get:schedule.Lecturer.firstName)
  return _internal_firstname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Lecturer::set_firstname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.firstname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.Lecturer.firstName)
}
inline std::string* Lecturer::mutable_firstname() {
  std::string* _s = _internal_mutable_firstname();
  // @@protoc_insertion_point(field_mutable:schedule.Lecturer.firstName)
  return _s;
}
inline const std::string& Lecturer::_internal_firstname() const {
  return _impl_.firstname_.Get();
}
inline void Lecturer::_internal_set_firstname(const std::string& value) {
  
  _impl_.firstname_.Set(value, GetArenaForAllocation());
}
inline std::string* Lecturer::_internal_mutable_firstname() {
  
  return _impl_.firstname_.Mutable(GetArenaForAllocation());
}
inline std::string* Lecturer::release_firstname() {
  // @@protoc_insertion_point(field_release:schedule.Lecturer.firstName)
  return _impl_.firstname_.Release();
}
inline void Lecturer::set_allocated_firstname(std::string* firstname) {
  if (firstname != nullptr) {
    
  } else {
    
  }
  _impl_.firstname_.SetAllocated(firstname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.firstname_.IsDefault()) {
    _impl_.firstname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.Lecturer.firstName)
}

// string lastName = 2;
inline void Lecturer::clear_lastname() {
  _impl_.lastname_.ClearToEmpty();
}
inline const std::string& Lecturer::lastname() const {
  // @@protoc_insertion_point(field_get:schedule.Lecturer.lastName)
  return _internal_lastname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Lecturer::set_lastname(ArgT0&& arg0, ArgT... args) {
 
 _impl_.lastname_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.Lecturer.lastName)
}
inline std::string* Lecturer::mutable_lastname() {
  std::string* _s = _internal_mutable_lastname();
  // @@protoc_insertion_point(field_mutable:schedule.Lecturer.lastName)
  return _s;
}
inline const std::string& Lecturer::_internal_lastname() const {
  return _impl_.lastname_.Get();
}
inline void Lecturer::_internal_set_lastname(const std::string& value) {
  
  _impl_.lastname_.Set(value, GetArenaForAllocation());
}
inline std::string* Lecturer::_internal_mutable_lastname() {
  
  return _impl_.lastname_.Mutable(GetArenaForAllocation());
}
inline std::string* Lecturer::release_lastname() {
  // @@protoc_insertion_point(field_release:schedule.Lecturer.lastName)
  return _impl_.lastname_.Release();
}
inline void Lecturer::set_allocated_lastname(std::string* lastname) {
  if (lastname != nullptr) {
    
  } else {
    
  }
  _impl_.lastname_.SetAllocated(lastname, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.lastname_.IsDefault()) {
    _impl_.lastname_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.Lecturer.lastName)
}

// string middleName = 3;
inline void Lecturer::clear_middlename() {
  _impl_.middlename_.ClearToEmpty();
}
inline const std::string& Lecturer::middlename() const {
  // @@protoc_insertion_point(field_get:schedule.Lecturer.middleName)
  return _internal_middlename();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Lecturer::set_middlename(ArgT0&& arg0, ArgT... args) {
 
 _impl_.middlename_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:schedule.Lecturer.middleName)
}
inline std::string* Lecturer::mutable_middlename() {
  std::string* _s = _internal_mutable_middlename();
  // @@protoc_insertion_point(field_mutable:schedule.Lecturer.middleName)
  return _s;
}
inline const std::string& Lecturer::_internal_middlename() const {
  return _impl_.middlename_.Get();
}
inline void Lecturer::_internal_set_middlename(const std::string& value) {
  
  _impl_.middlename_.Set(value, GetArenaForAllocation());
}
inline std::string* Lecturer::_internal_mutable_middlename() {
  
  return _impl_.middlename_.Mutable(GetArenaForAllocation());
}
inline std::string* Lecturer::release_middlename() {
  // @@protoc_insertion_point(field_release:schedule.Lecturer.middleName)
  return _impl_.middlename_.Release();
}
inline void Lecturer::set_allocated_middlename(std::string* middlename) {
  if (middlename != nullptr) {
    
  } else {
    
  }
  _impl_.middlename_.SetAllocated(middlename, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.middlename_.IsDefault()) {
    _impl_.middlename_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:schedule.Lecturer.middleName)
}

// -------------------------------------------------------------------

// TimeRange

// .schedule.TimeOfDay start = 1;
inline bool TimeRange::_internal_has_start() const {
  return this != internal_default_instance() && _impl_.start_ != nullptr;
}
inline bool TimeRange::has_start() const {
  return _internal_has_start();
}
inline void TimeRange::clear_start() {
  if (GetArenaForAllocation() == nullptr && _impl_.start_ != nullptr) {
    delete _impl_.start_;
  }
  _impl_.start_ = nullptr;
}
inline const ::schedule::TimeOfDay& TimeRange::_internal_start() const {
  const ::schedule::TimeOfDay* p = _impl_.start_;
  return p != nullptr ? *p : reinterpret_cast<const ::schedule::TimeOfDay&>(
      ::schedule::_TimeOfDay_default_instance_);
}
inline const ::schedule::TimeOfDay& TimeRange::start() const {
  // @@protoc_insertion_point(field_get:schedule.TimeRange.start)
  return _internal_start();
}
inline void TimeRange::unsafe_arena_set_allocated_start(
    ::schedule::TimeOfDay* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.start_);
  }
  _impl_.start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:schedule.TimeRange.start)
}
inline ::schedule::TimeOfDay* TimeRange::release_start() {
  
  ::schedule::TimeOfDay* temp = _impl_.start_;
  _impl_.start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::schedule::TimeOfDay* TimeRange::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:schedule.TimeRange.start)
  
  ::schedule::TimeOfDay* temp = _impl_.start_;
  _impl_.start_ = nullptr;
  return temp;
}
inline ::schedule::TimeOfDay* TimeRange::_internal_mutable_start() {
  
  if (_impl_.start_ == nullptr) {
    auto* p = CreateMaybeMessage<::schedule::TimeOfDay>(GetArenaForAllocation());
    _impl_.start_ = p;
  }
  return _impl_.start_;
}
inline ::schedule::TimeOfDay* TimeRange::mutable_start() {
  ::schedule::TimeOfDay* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:schedule.TimeRange.start)
  return _msg;
}
inline void TimeRange::set_allocated_start(::schedule::TimeOfDay* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.start_;
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(start);
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.start_ = start;
  // @@protoc_insertion_point(field_set_allocated:schedule.TimeRange.start)
}

// .schedule.TimeOfDay end = 2;
inline bool TimeRange::_internal_has_end() const {
  return this != internal_default_instance() && _impl_.end_ != nullptr;
}
inline bool TimeRange::has_end() const {
  return _internal_has_end();
}
inline void TimeRange::clear_end() {
  if (GetArenaForAllocation() == nullptr && _impl_.end_ != nullptr) {
    delete _impl_.end_;
  }
  _impl_.end_ = nullptr;
}
inline const ::schedule::TimeOfDay& TimeRange::_internal_end() const {
  const ::schedule::TimeOfDay* p = _impl_.end_;
  return p != nullptr ? *p : reinterpret_cast<const ::schedule::TimeOfDay&>(
      ::schedule::_TimeOfDay_default_instance_);
}
inline const ::schedule::TimeOfDay& TimeRange::end() const {
  // @@protoc_insertion_point(field_get:schedule.TimeRange.end)
  return _internal_end();
}
inline void TimeRange::unsafe_arena_set_allocated_end(
    ::schedule::TimeOfDay* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_);
  }
  _impl_.end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:schedule.TimeRange.end)
}
inline ::schedule::TimeOfDay* TimeRange::release_end() {
  
  ::schedule::TimeOfDay* temp = _impl_.end_;
  _impl_.end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::schedule::TimeOfDay* TimeRange::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:schedule.TimeRange.end)
  
  ::schedule::TimeOfDay* temp = _impl_.end_;
  _impl_.end_ = nullptr;
  return temp;
}
inline ::schedule::TimeOfDay* TimeRange::_internal_mutable_end() {
  
  if (_impl_.end_ == nullptr) {
    auto* p = CreateMaybeMessage<::schedule::TimeOfDay>(GetArenaForAllocation());
    _impl_.end_ = p;
  }
  return _impl_.end_;
}
inline ::schedule::TimeOfDay* TimeRange::mutable_end() {
  ::schedule::TimeOfDay* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:schedule.TimeRange.end)
  return _msg;
}
inline void TimeRange::set_allocated_end(::schedule::TimeOfDay* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.end_;
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(end);
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_ = end;
  // @@protoc_insertion_point(field_set_allocated:schedule.TimeRange.end)
}

// -------------------------------------------------------------------

// TimeOfDay

// int32 hour = 1;
inline void TimeOfDay::clear_hour() {
  _impl_.hour_ = 0;
}
inline int32_t TimeOfDay::_internal_hour() const {
  return _impl_.hour_;
}
inline int32_t TimeOfDay::hour() const {
  // @@protoc_insertion_point(field_get:schedule.TimeOfDay.hour)
  return _internal_hour();
}
inline void TimeOfDay::_internal_set_hour(int32_t value) {
  
  _impl_.hour_ = value;
}
inline void TimeOfDay::set_hour(int32_t value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:schedule.TimeOfDay.hour)
}

// int32 minute = 2;
inline void TimeOfDay::clear_minute() {
  _impl_.minute_ = 0;
}
inline int32_t TimeOfDay::_internal_minute() const {
  return _impl_.minute_;
}
inline int32_t TimeOfDay::minute() const {
  // @@protoc_insertion_point(field_get:schedule.TimeOfDay.minute)
  return _internal_minute();
}
inline void TimeOfDay::_internal_set_minute(int32_t value) {
  
  _impl_.minute_ = value;
}
inline void TimeOfDay::set_minut(int32_t value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:schedule.TimeOfDay.minute)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace schedule

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::schedule::Subject_SubjectType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::schedule::Subject_SubjectType>() {
  return ::schedule::Subject_SubjectType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_schedule_2eproto
