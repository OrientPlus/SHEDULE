// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shedule.proto

#include "shedule.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace schedule {
PROTOBUF_CONSTEXPR ScheduleRequest1::ScheduleRequest1(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.day_of_week_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleRequest1DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleRequest1DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleRequest1DefaultTypeInternal() {}
  union {
    ScheduleRequest1 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleRequest1DefaultTypeInternal _ScheduleRequest1_default_instance_;
PROTOBUF_CONSTEXPR ScheduleRequest2::ScheduleRequest2(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleRequest2DefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleRequest2DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleRequest2DefaultTypeInternal() {}
  union {
    ScheduleRequest2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleRequest2DefaultTypeInternal _ScheduleRequest2_default_instance_;
PROTOBUF_CONSTEXPR OperationStatus::OperationStatus(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.error_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_flag_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct OperationStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OperationStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OperationStatusDefaultTypeInternal() {}
  union {
    OperationStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OperationStatusDefaultTypeInternal _OperationStatus_default_instance_;
PROTOBUF_CONSTEXPR ScheduleInfo::ScheduleInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.group_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.audit_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.start_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.end_time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.lesson_name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.parity_)*/false
  , /*decltype(_impl_.day_of_week_)*/0
  , /*decltype(_impl_.lesson_count_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleInfoDefaultTypeInternal() {}
  union {
    ScheduleInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleInfoDefaultTypeInternal _ScheduleInfo_default_instance_;
PROTOBUF_CONSTEXPR ScheduleInfoContainer::ScheduleInfoContainer(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.schedule_container_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ScheduleInfoContainerDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ScheduleInfoContainerDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ScheduleInfoContainerDefaultTypeInternal() {}
  union {
    ScheduleInfoContainer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ScheduleInfoContainerDefaultTypeInternal _ScheduleInfoContainer_default_instance_;
}  // namespace schedule
static ::_pb::Metadata file_level_metadata_shedule_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_shedule_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_shedule_2eproto = nullptr;

const uint32_t TableStruct_shedule_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleRequest1, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleRequest1, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleRequest1, _impl_.day_of_week_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleRequest2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleRequest2, _impl_.group_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule::OperationStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule::OperationStatus, _impl_.error_flag_),
  PROTOBUF_FIELD_OFFSET(::schedule::OperationStatus, _impl_.error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.group_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.audit_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.start_time_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.end_time_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.lesson_name_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.parity_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.day_of_week_),
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfo, _impl_.lesson_count_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfoContainer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::schedule::ScheduleInfoContainer, _impl_.schedule_container_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::schedule::ScheduleRequest1)},
  { 8, -1, -1, sizeof(::schedule::ScheduleRequest2)},
  { 15, -1, -1, sizeof(::schedule::OperationStatus)},
  { 23, -1, -1, sizeof(::schedule::ScheduleInfo)},
  { 37, -1, -1, sizeof(::schedule::ScheduleInfoContainer)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::schedule::_ScheduleRequest1_default_instance_._instance,
  &::schedule::_ScheduleRequest2_default_instance_._instance,
  &::schedule::_OperationStatus_default_instance_._instance,
  &::schedule::_ScheduleInfo_default_instance_._instance,
  &::schedule::_ScheduleInfoContainer_default_instance_._instance,
};

const char descriptor_table_protodef_shedule_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rshedule.proto\022\010schedule\"6\n\020ScheduleReq"
  "uest1\022\r\n\005group\030\001 \001(\t\022\023\n\013day_of_week\030\002 \001("
  "\005\"!\n\020ScheduleRequest2\022\r\n\005group\030\001 \001(\t\"4\n\017"
  "OperationStatus\022\022\n\nerror_flag\030\001 \001(\010\022\r\n\005e"
  "rror\030\002 \001(\t\"\242\001\n\014ScheduleInfo\022\r\n\005group\030\001 \001"
  "(\t\022\r\n\005audit\030\002 \001(\t\022\022\n\nstart_time\030\003 \001(\t\022\020\n"
  "\010end_time\030\004 \001(\t\022\023\n\013lesson_name\030\005 \001(\t\022\016\n\006"
  "parity\030\006 \001(\010\022\023\n\013day_of_week\030\007 \001(\005\022\024\n\014les"
  "son_count\030\010 \001(\005\"K\n\025ScheduleInfoContainer"
  "\0222\n\022schedule_container\030\001 \003(\0132\026.schedule."
  "ScheduleInfo2\273\002\n\017ScheduleService\022A\n\013GetS"
  "chedule\022\032.schedule.ScheduleRequest1\032\026.sc"
  "hedule.ScheduleInfo\022Q\n\022GetScheduleForWee"
  "k\022\032.schedule.ScheduleRequest2\032\037.schedule"
  ".ScheduleInfoContainer\022@\n\013SetSchedule\022\026."
  "schedule.ScheduleInfo\032\031.schedule.Operati"
  "onStatus\022P\n\022SetScheduleForWeek\022\037.schedul"
  "e.ScheduleInfoContainer\032\031.schedule.Opera"
  "tionStatusb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_shedule_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_shedule_2eproto = {
    false, false, 738, descriptor_table_protodef_shedule_2eproto,
    "shedule.proto",
    &descriptor_table_shedule_2eproto_once, nullptr, 0, 5,
    schemas, file_default_instances, TableStruct_shedule_2eproto::offsets,
    file_level_metadata_shedule_2eproto, file_level_enum_descriptors_shedule_2eproto,
    file_level_service_descriptors_shedule_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_shedule_2eproto_getter() {
  return &descriptor_table_shedule_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_shedule_2eproto(&descriptor_table_shedule_2eproto);
namespace schedule {

// ===================================================================

class ScheduleRequest1::_Internal {
 public:
};

ScheduleRequest1::ScheduleRequest1(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule.ScheduleRequest1)
}
ScheduleRequest1::ScheduleRequest1(const ScheduleRequest1& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleRequest1* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , decltype(_impl_.day_of_week_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.day_of_week_ = from._impl_.day_of_week_;
  // @@protoc_insertion_point(copy_constructor:schedule.ScheduleRequest1)
}

inline void ScheduleRequest1::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , decltype(_impl_.day_of_week_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduleRequest1::~ScheduleRequest1() {
  // @@protoc_insertion_point(destructor:schedule.ScheduleRequest1)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleRequest1::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
}

void ScheduleRequest1::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleRequest1::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule.ScheduleRequest1)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_.ClearToEmpty();
  _impl_.day_of_week_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleRequest1::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleRequest1.group"));
        } else
          goto handle_unusual;
        continue;
      // int32 day_of_week = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.day_of_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleRequest1::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.ScheduleRequest1)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleRequest1.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  // int32 day_of_week = 2;
  if (this->_internal_day_of_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_day_of_week(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.ScheduleRequest1)
  return target;
}

size_t ScheduleRequest1::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule.ScheduleRequest1)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // int32 day_of_week = 2;
  if (this->_internal_day_of_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day_of_week());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleRequest1::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleRequest1::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleRequest1::GetClassData() const { return &_class_data_; }


void ScheduleRequest1::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleRequest1*>(&to_msg);
  auto& from = static_cast<const ScheduleRequest1&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule.ScheduleRequest1)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (from._internal_day_of_week() != 0) {
    _this->_internal_set_day_of_week(from._internal_day_of_week());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleRequest1::CopyFrom(const ScheduleRequest1& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule.ScheduleRequest1)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleRequest1::IsInitialized() const {
  return true;
}

void ScheduleRequest1::InternalSwap(ScheduleRequest1* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  swap(_impl_.day_of_week_, other->_impl_.day_of_week_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleRequest1::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shedule_2eproto_getter, &descriptor_table_shedule_2eproto_once,
      file_level_metadata_shedule_2eproto[0]);
}

// ===================================================================

class ScheduleRequest2::_Internal {
 public:
};

ScheduleRequest2::ScheduleRequest2(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule.ScheduleRequest2)
}
ScheduleRequest2::ScheduleRequest2(const ScheduleRequest2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleRequest2* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:schedule.ScheduleRequest2)
}

inline void ScheduleRequest2::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduleRequest2::~ScheduleRequest2() {
  // @@protoc_insertion_point(destructor:schedule.ScheduleRequest2)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleRequest2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
}

void ScheduleRequest2::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleRequest2::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule.ScheduleRequest2)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleRequest2::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleRequest2.group"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleRequest2::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.ScheduleRequest2)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleRequest2.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.ScheduleRequest2)
  return target;
}

size_t ScheduleRequest2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule.ScheduleRequest2)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleRequest2::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleRequest2::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleRequest2::GetClassData() const { return &_class_data_; }


void ScheduleRequest2::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleRequest2*>(&to_msg);
  auto& from = static_cast<const ScheduleRequest2&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule.ScheduleRequest2)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleRequest2::CopyFrom(const ScheduleRequest2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule.ScheduleRequest2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleRequest2::IsInitialized() const {
  return true;
}

void ScheduleRequest2::InternalSwap(ScheduleRequest2* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleRequest2::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shedule_2eproto_getter, &descriptor_table_shedule_2eproto_once,
      file_level_metadata_shedule_2eproto[1]);
}

// ===================================================================

class OperationStatus::_Internal {
 public:
};

OperationStatus::OperationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule.OperationStatus)
}
OperationStatus::OperationStatus(const OperationStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  OperationStatus* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.error_flag_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    _this->_impl_.error_.Set(from._internal_error(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_flag_ = from._impl_.error_flag_;
  // @@protoc_insertion_point(copy_constructor:schedule.OperationStatus)
}

inline void OperationStatus::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.error_){}
    , decltype(_impl_.error_flag_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

OperationStatus::~OperationStatus() {
  // @@protoc_insertion_point(destructor:schedule.OperationStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void OperationStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_.Destroy();
}

void OperationStatus::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void OperationStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule.OperationStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.error_.ClearToEmpty();
  _impl_.error_flag_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool error_flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.error_flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.OperationStatus.error"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OperationStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.OperationStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool error_flag = 1;
  if (this->_internal_error_flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_error_flag(), target);
  }

  // string error = 2;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.OperationStatus.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.OperationStatus)
  return target;
}

size_t OperationStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule.OperationStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string error = 2;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  // bool error_flag = 1;
  if (this->_internal_error_flag() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OperationStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    OperationStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OperationStatus::GetClassData() const { return &_class_data_; }


void OperationStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<OperationStatus*>(&to_msg);
  auto& from = static_cast<const OperationStatus&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule.OperationStatus)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _this->_internal_set_error(from._internal_error());
  }
  if (from._internal_error_flag() != 0) {
    _this->_internal_set_error_flag(from._internal_error_flag());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OperationStatus::CopyFrom(const OperationStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule.OperationStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationStatus::IsInitialized() const {
  return true;
}

void OperationStatus::InternalSwap(OperationStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_, lhs_arena,
      &other->_impl_.error_, rhs_arena
  );
  swap(_impl_.error_flag_, other->_impl_.error_flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shedule_2eproto_getter, &descriptor_table_shedule_2eproto_once,
      file_level_metadata_shedule_2eproto[2]);
}

// ===================================================================

class ScheduleInfo::_Internal {
 public:
};

ScheduleInfo::ScheduleInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule.ScheduleInfo)
}
ScheduleInfo::ScheduleInfo(const ScheduleInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , decltype(_impl_.audit_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.lesson_name_){}
    , decltype(_impl_.parity_){}
    , decltype(_impl_.day_of_week_){}
    , decltype(_impl_.lesson_count_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_group().empty()) {
    _this->_impl_.group_.Set(from._internal_group(), 
      _this->GetArenaForAllocation());
  }
  _impl_.audit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_audit().empty()) {
    _this->_impl_.audit_.Set(from._internal_audit(), 
      _this->GetArenaForAllocation());
  }
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_start_time().empty()) {
    _this->_impl_.start_time_.Set(from._internal_start_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.end_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_end_time().empty()) {
    _this->_impl_.end_time_.Set(from._internal_end_time(), 
      _this->GetArenaForAllocation());
  }
  _impl_.lesson_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lesson_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_lesson_name().empty()) {
    _this->_impl_.lesson_name_.Set(from._internal_lesson_name(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.parity_, &from._impl_.parity_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.lesson_count_) -
    reinterpret_cast<char*>(&_impl_.parity_)) + sizeof(_impl_.lesson_count_));
  // @@protoc_insertion_point(copy_constructor:schedule.ScheduleInfo)
}

inline void ScheduleInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.group_){}
    , decltype(_impl_.audit_){}
    , decltype(_impl_.start_time_){}
    , decltype(_impl_.end_time_){}
    , decltype(_impl_.lesson_name_){}
    , decltype(_impl_.parity_){false}
    , decltype(_impl_.day_of_week_){0}
    , decltype(_impl_.lesson_count_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.group_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.group_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.audit_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.audit_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.start_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.start_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.end_time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.end_time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.lesson_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.lesson_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ScheduleInfo::~ScheduleInfo() {
  // @@protoc_insertion_point(destructor:schedule.ScheduleInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.group_.Destroy();
  _impl_.audit_.Destroy();
  _impl_.start_time_.Destroy();
  _impl_.end_time_.Destroy();
  _impl_.lesson_name_.Destroy();
}

void ScheduleInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule.ScheduleInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.group_.ClearToEmpty();
  _impl_.audit_.ClearToEmpty();
  _impl_.start_time_.ClearToEmpty();
  _impl_.end_time_.ClearToEmpty();
  _impl_.lesson_name_.ClearToEmpty();
  ::memset(&_impl_.parity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.lesson_count_) -
      reinterpret_cast<char*>(&_impl_.parity_)) + sizeof(_impl_.lesson_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string group = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_group();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleInfo.group"));
        } else
          goto handle_unusual;
        continue;
      // string audit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_audit();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleInfo.audit"));
        } else
          goto handle_unusual;
        continue;
      // string start_time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_start_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleInfo.start_time"));
        } else
          goto handle_unusual;
        continue;
      // string end_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_end_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleInfo.end_time"));
        } else
          goto handle_unusual;
        continue;
      // string lesson_name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_lesson_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "schedule.ScheduleInfo.lesson_name"));
        } else
          goto handle_unusual;
        continue;
      // bool parity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.parity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 day_of_week = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.day_of_week_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 lesson_count = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          _impl_.lesson_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.ScheduleInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_group().data(), static_cast<int>(this->_internal_group().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleInfo.group");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_group(), target);
  }

  // string audit = 2;
  if (!this->_internal_audit().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_audit().data(), static_cast<int>(this->_internal_audit().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleInfo.audit");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_audit(), target);
  }

  // string start_time = 3;
  if (!this->_internal_start_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_start_time().data(), static_cast<int>(this->_internal_start_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleInfo.start_time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_start_time(), target);
  }

  // string end_time = 4;
  if (!this->_internal_end_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_end_time().data(), static_cast<int>(this->_internal_end_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleInfo.end_time");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_end_time(), target);
  }

  // string lesson_name = 5;
  if (!this->_internal_lesson_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_lesson_name().data(), static_cast<int>(this->_internal_lesson_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "schedule.ScheduleInfo.lesson_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_lesson_name(), target);
  }

  // bool parity = 6;
  if (this->_internal_parity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_parity(), target);
  }

  // int32 day_of_week = 7;
  if (this->_internal_day_of_week() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(7, this->_internal_day_of_week(), target);
  }

  // int32 lesson_count = 8;
  if (this->_internal_lesson_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(8, this->_internal_lesson_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.ScheduleInfo)
  return target;
}

size_t ScheduleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule.ScheduleInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string group = 1;
  if (!this->_internal_group().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_group());
  }

  // string audit = 2;
  if (!this->_internal_audit().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_audit());
  }

  // string start_time = 3;
  if (!this->_internal_start_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_start_time());
  }

  // string end_time = 4;
  if (!this->_internal_end_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_end_time());
  }

  // string lesson_name = 5;
  if (!this->_internal_lesson_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_lesson_name());
  }

  // bool parity = 6;
  if (this->_internal_parity() != 0) {
    total_size += 1 + 1;
  }

  // int32 day_of_week = 7;
  if (this->_internal_day_of_week() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_day_of_week());
  }

  // int32 lesson_count = 8;
  if (this->_internal_lesson_count() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_lesson_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleInfo::GetClassData() const { return &_class_data_; }


void ScheduleInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleInfo*>(&to_msg);
  auto& from = static_cast<const ScheduleInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule.ScheduleInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_group().empty()) {
    _this->_internal_set_group(from._internal_group());
  }
  if (!from._internal_audit().empty()) {
    _this->_internal_set_audit(from._internal_audit());
  }
  if (!from._internal_start_time().empty()) {
    _this->_internal_set_start_time(from._internal_start_time());
  }
  if (!from._internal_end_time().empty()) {
    _this->_internal_set_end_time(from._internal_end_time());
  }
  if (!from._internal_lesson_name().empty()) {
    _this->_internal_set_lesson_name(from._internal_lesson_name());
  }
  if (from._internal_parity() != 0) {
    _this->_internal_set_parity(from._internal_parity());
  }
  if (from._internal_day_of_week() != 0) {
    _this->_internal_set_day_of_week(from._internal_day_of_week());
  }
  if (from._internal_lesson_count() != 0) {
    _this->_internal_set_lesson_count(from._internal_lesson_count());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleInfo::CopyFrom(const ScheduleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule.ScheduleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleInfo::IsInitialized() const {
  return true;
}

void ScheduleInfo::InternalSwap(ScheduleInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.group_, lhs_arena,
      &other->_impl_.group_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.audit_, lhs_arena,
      &other->_impl_.audit_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.start_time_, lhs_arena,
      &other->_impl_.start_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.end_time_, lhs_arena,
      &other->_impl_.end_time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.lesson_name_, lhs_arena,
      &other->_impl_.lesson_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScheduleInfo, _impl_.lesson_count_)
      + sizeof(ScheduleInfo::_impl_.lesson_count_)
      - PROTOBUF_FIELD_OFFSET(ScheduleInfo, _impl_.parity_)>(
          reinterpret_cast<char*>(&_impl_.parity_),
          reinterpret_cast<char*>(&other->_impl_.parity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shedule_2eproto_getter, &descriptor_table_shedule_2eproto_once,
      file_level_metadata_shedule_2eproto[3]);
}

// ===================================================================

class ScheduleInfoContainer::_Internal {
 public:
};

ScheduleInfoContainer::ScheduleInfoContainer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:schedule.ScheduleInfoContainer)
}
ScheduleInfoContainer::ScheduleInfoContainer(const ScheduleInfoContainer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ScheduleInfoContainer* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.schedule_container_){from._impl_.schedule_container_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:schedule.ScheduleInfoContainer)
}

inline void ScheduleInfoContainer::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.schedule_container_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ScheduleInfoContainer::~ScheduleInfoContainer() {
  // @@protoc_insertion_point(destructor:schedule.ScheduleInfoContainer)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ScheduleInfoContainer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.schedule_container_.~RepeatedPtrField();
}

void ScheduleInfoContainer::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ScheduleInfoContainer::Clear() {
// @@protoc_insertion_point(message_clear_start:schedule.ScheduleInfoContainer)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.schedule_container_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScheduleInfoContainer::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .schedule.ScheduleInfo schedule_container = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_schedule_container(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScheduleInfoContainer::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:schedule.ScheduleInfoContainer)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .schedule.ScheduleInfo schedule_container = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_schedule_container_size()); i < n; i++) {
    const auto& repfield = this->_internal_schedule_container(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schedule.ScheduleInfoContainer)
  return target;
}

size_t ScheduleInfoContainer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schedule.ScheduleInfoContainer)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .schedule.ScheduleInfo schedule_container = 1;
  total_size += 1UL * this->_internal_schedule_container_size();
  for (const auto& msg : this->_impl_.schedule_container_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScheduleInfoContainer::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ScheduleInfoContainer::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScheduleInfoContainer::GetClassData() const { return &_class_data_; }


void ScheduleInfoContainer::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ScheduleInfoContainer*>(&to_msg);
  auto& from = static_cast<const ScheduleInfoContainer&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:schedule.ScheduleInfoContainer)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.schedule_container_.MergeFrom(from._impl_.schedule_container_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScheduleInfoContainer::CopyFrom(const ScheduleInfoContainer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schedule.ScheduleInfoContainer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScheduleInfoContainer::IsInitialized() const {
  return true;
}

void ScheduleInfoContainer::InternalSwap(ScheduleInfoContainer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.schedule_container_.InternalSwap(&other->_impl_.schedule_container_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScheduleInfoContainer::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_shedule_2eproto_getter, &descriptor_table_shedule_2eproto_once,
      file_level_metadata_shedule_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace schedule
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::schedule::ScheduleRequest1*
Arena::CreateMaybeMessage< ::schedule::ScheduleRequest1 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule::ScheduleRequest1 >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule::ScheduleRequest2*
Arena::CreateMaybeMessage< ::schedule::ScheduleRequest2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule::ScheduleRequest2 >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule::OperationStatus*
Arena::CreateMaybeMessage< ::schedule::OperationStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule::OperationStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule::ScheduleInfo*
Arena::CreateMaybeMessage< ::schedule::ScheduleInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule::ScheduleInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::schedule::ScheduleInfoContainer*
Arena::CreateMaybeMessage< ::schedule::ScheduleInfoContainer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::schedule::ScheduleInfoContainer >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
