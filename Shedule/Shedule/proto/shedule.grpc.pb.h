// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shedule.proto
#ifndef GRPC_shedule_2eproto__INCLUDED
#define GRPC_shedule_2eproto__INCLUDED

#include "shedule.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace schedule {

class ScheduleService final {
 public:
  static constexpr char const* service_full_name() {
    return "schedule.ScheduleService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::schedule::ScheduleInfo* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>> AsyncGetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>>(AsyncGetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>> PrepareAsyncGetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>>(PrepareAsyncGetScheduleRaw(context, request, cq));
    }
    virtual ::grpc::Status GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::schedule::ScheduleInfoContainer* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>> AsyncGetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>>(AsyncGetScheduleForWeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>> PrepareAsyncGetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>>(PrepareAsyncGetScheduleForWeekRaw(context, request, cq));
    }
    virtual ::grpc::Status SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::schedule::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>> AsyncSetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>>(AsyncSetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>> PrepareAsyncSetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>>(PrepareAsyncSetScheduleRaw(context, request, cq));
    }
    virtual ::grpc::Status SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::schedule::OperationStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>> AsyncSetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>>(AsyncSetScheduleForWeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>> PrepareAsyncSetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>>(PrepareAsyncSetScheduleForWeekRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>* AsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfo>* PrepareAsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>* AsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::ScheduleInfoContainer>* PrepareAsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>* AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>* PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>* AsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::schedule::OperationStatus>* PrepareAsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::schedule::ScheduleInfo* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>> AsyncGetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>>(AsyncGetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>> PrepareAsyncGetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>>(PrepareAsyncGetScheduleRaw(context, request, cq));
    }
    ::grpc::Status GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::schedule::ScheduleInfoContainer* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>> AsyncGetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>>(AsyncGetScheduleForWeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>> PrepareAsyncGetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>>(PrepareAsyncGetScheduleForWeekRaw(context, request, cq));
    }
    ::grpc::Status SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::schedule::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>> AsyncSetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>>(AsyncSetScheduleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>> PrepareAsyncSetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>>(PrepareAsyncSetScheduleRaw(context, request, cq));
    }
    ::grpc::Status SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::schedule::OperationStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>> AsyncSetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>>(AsyncSetScheduleForWeekRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>> PrepareAsyncSetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>>(PrepareAsyncSetScheduleForWeekRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, std::function<void(::grpc::Status)>) override;
      void GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, std::function<void(::grpc::Status)>) override;
      void GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)>) override;
      void SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>* AsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>* PrepareAsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>* AsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>* PrepareAsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* AsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* PrepareAsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetSchedule_;
    const ::grpc::internal::RpcMethod rpcmethod_GetScheduleForWeek_;
    const ::grpc::internal::RpcMethod rpcmethod_SetSchedule_;
    const ::grpc::internal::RpcMethod rpcmethod_SetScheduleForWeek_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetSchedule(::grpc::ServerContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response);
    virtual ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response);
    virtual ::grpc::Status SetSchedule(::grpc::ServerContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response);
    virtual ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSchedule() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSchedule(::grpc::ServerContext* context, ::schedule::ScheduleRequest1* request, ::grpc::ServerAsyncResponseWriter< ::schedule::ScheduleInfo>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduleForWeek(::grpc::ServerContext* context, ::schedule::ScheduleRequest2* request, ::grpc::ServerAsyncResponseWriter< ::schedule::ScheduleInfoContainer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetSchedule() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSchedule(::grpc::ServerContext* context, ::schedule::ScheduleInfo* request, ::grpc::ServerAsyncResponseWriter< ::schedule::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetScheduleForWeek(::grpc::ServerContext* context, ::schedule::ScheduleInfoContainer* request, ::grpc::ServerAsyncResponseWriter< ::schedule::OperationStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetSchedule<WithAsyncMethod_GetScheduleForWeek<WithAsyncMethod_SetSchedule<WithAsyncMethod_SetScheduleForWeek<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSchedule() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response) { return this->GetSchedule(context, request, response); }));}
    void SetMessageAllocatorFor_GetSchedule(
        ::grpc::MessageAllocator< ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response) { return this->GetScheduleForWeek(context, request, response); }));}
    void SetMessageAllocatorFor_GetScheduleForWeek(
        ::grpc::MessageAllocator< ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetScheduleForWeek(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetSchedule() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleInfo, ::schedule::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response) { return this->SetSchedule(context, request, response); }));}
    void SetMessageAllocatorFor_SetSchedule(
        ::grpc::MessageAllocator< ::schedule::ScheduleInfo, ::schedule::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleInfo, ::schedule::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response) { return this->SetScheduleForWeek(context, request, response); }));}
    void SetMessageAllocatorFor_SetScheduleForWeek(
        ::grpc::MessageAllocator< ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetScheduleForWeek(
      ::grpc::CallbackServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetSchedule<WithCallbackMethod_GetScheduleForWeek<WithCallbackMethod_SetSchedule<WithCallbackMethod_SetScheduleForWeek<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSchedule() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetSchedule() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSchedule() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSchedule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetScheduleForWeek(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetSchedule() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetSchedule(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetScheduleForWeek(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSchedule() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSchedule(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetScheduleForWeek(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetScheduleForWeek(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetSchedule() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetSchedule(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetSchedule(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetScheduleForWeek(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetScheduleForWeek(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSchedule() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo>* streamer) {
                       return this->StreamedGetSchedule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest1* /*request*/, ::schedule::ScheduleInfo* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule::ScheduleRequest1,::schedule::ScheduleInfo>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetScheduleForWeek() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer>* streamer) {
                       return this->StreamedGetScheduleForWeek(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleRequest2* /*request*/, ::schedule::ScheduleInfoContainer* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetScheduleForWeek(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule::ScheduleRequest2,::schedule::ScheduleInfoContainer>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetSchedule : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetSchedule() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule::ScheduleInfo, ::schedule::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule::ScheduleInfo, ::schedule::OperationStatus>* streamer) {
                       return this->StreamedSetSchedule(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetSchedule() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetSchedule(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfo* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetSchedule(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule::ScheduleInfo,::schedule::OperationStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetScheduleForWeek : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetScheduleForWeek() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus>* streamer) {
                       return this->StreamedSetScheduleForWeek(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetScheduleForWeek() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetScheduleForWeek(::grpc::ServerContext* /*context*/, const ::schedule::ScheduleInfoContainer* /*request*/, ::schedule::OperationStatus* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetScheduleForWeek(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::schedule::ScheduleInfoContainer,::schedule::OperationStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetSchedule<WithStreamedUnaryMethod_GetScheduleForWeek<WithStreamedUnaryMethod_SetSchedule<WithStreamedUnaryMethod_SetScheduleForWeek<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetSchedule<WithStreamedUnaryMethod_GetScheduleForWeek<WithStreamedUnaryMethod_SetSchedule<WithStreamedUnaryMethod_SetScheduleForWeek<Service > > > > StreamedService;
};

}  // namespace schedule


#endif  // GRPC_shedule_2eproto__INCLUDED
