// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: shedule.proto

#include "shedule.pb.h"
#include "shedule.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace schedule {

static const char* ScheduleService_method_names[] = {
  "/schedule.ScheduleService/GetSchedule",
  "/schedule.ScheduleService/GetScheduleForWeek",
  "/schedule.ScheduleService/SetSchedule",
  "/schedule.ScheduleService/SetScheduleForWeek",
};

std::unique_ptr< ScheduleService::Stub> ScheduleService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ScheduleService::Stub> stub(new ScheduleService::Stub(channel, options));
  return stub;
}

ScheduleService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetSchedule_(ScheduleService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetScheduleForWeek_(ScheduleService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetSchedule_(ScheduleService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetScheduleForWeek_(ScheduleService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ScheduleService::Stub::GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::schedule::ScheduleInfo* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSchedule_, context, request, response);
}

void ScheduleService::Stub::async::GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSchedule_, context, request, response, std::move(f));
}

void ScheduleService::Stub::async::GetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>* ScheduleService::Stub::PrepareAsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::schedule::ScheduleInfo, ::schedule::ScheduleRequest1, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfo>* ScheduleService::Stub::AsyncGetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest1& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ScheduleService::Stub::GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::schedule::ScheduleInfoContainer* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetScheduleForWeek_, context, request, response);
}

void ScheduleService::Stub::async::GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScheduleForWeek_, context, request, response, std::move(f));
}

void ScheduleService::Stub::async::GetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetScheduleForWeek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>* ScheduleService::Stub::PrepareAsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::schedule::ScheduleInfoContainer, ::schedule::ScheduleRequest2, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetScheduleForWeek_, context, request);
}

::grpc::ClientAsyncResponseReader< ::schedule::ScheduleInfoContainer>* ScheduleService::Stub::AsyncGetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleRequest2& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetScheduleForWeekRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ScheduleService::Stub::SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::schedule::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule::ScheduleInfo, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetSchedule_, context, request, response);
}

void ScheduleService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule::ScheduleInfo, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, std::move(f));
}

void ScheduleService::Stub::async::SetSchedule(::grpc::ClientContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetSchedule_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* ScheduleService::Stub::PrepareAsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::schedule::OperationStatus, ::schedule::ScheduleInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetSchedule_, context, request);
}

::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* ScheduleService::Stub::AsyncSetScheduleRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfo& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScheduleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ScheduleService::Stub::SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::schedule::OperationStatus* response) {
  return ::grpc::internal::BlockingUnaryCall< ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetScheduleForWeek_, context, request, response);
}

void ScheduleService::Stub::async::SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScheduleForWeek_, context, request, response, std::move(f));
}

void ScheduleService::Stub::async::SetScheduleForWeek(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetScheduleForWeek_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* ScheduleService::Stub::PrepareAsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::schedule::OperationStatus, ::schedule::ScheduleInfoContainer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetScheduleForWeek_, context, request);
}

::grpc::ClientAsyncResponseReader< ::schedule::OperationStatus>* ScheduleService::Stub::AsyncSetScheduleForWeekRaw(::grpc::ClientContext* context, const ::schedule::ScheduleInfoContainer& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetScheduleForWeekRaw(context, request, cq);
  result->StartCall();
  return result;
}

ScheduleService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::schedule::ScheduleRequest1, ::schedule::ScheduleInfo, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ScheduleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule::ScheduleRequest1* req,
             ::schedule::ScheduleInfo* resp) {
               return service->GetSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::schedule::ScheduleRequest2, ::schedule::ScheduleInfoContainer, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ScheduleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule::ScheduleRequest2* req,
             ::schedule::ScheduleInfoContainer* resp) {
               return service->GetScheduleForWeek(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::schedule::ScheduleInfo, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ScheduleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule::ScheduleInfo* req,
             ::schedule::OperationStatus* resp) {
               return service->SetSchedule(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ScheduleService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ScheduleService::Service, ::schedule::ScheduleInfoContainer, ::schedule::OperationStatus, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ScheduleService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::schedule::ScheduleInfoContainer* req,
             ::schedule::OperationStatus* resp) {
               return service->SetScheduleForWeek(ctx, req, resp);
             }, this)));
}

ScheduleService::Service::~Service() {
}

::grpc::Status ScheduleService::Service::GetSchedule(::grpc::ServerContext* context, const ::schedule::ScheduleRequest1* request, ::schedule::ScheduleInfo* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::GetScheduleForWeek(::grpc::ServerContext* context, const ::schedule::ScheduleRequest2* request, ::schedule::ScheduleInfoContainer* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::SetSchedule(::grpc::ServerContext* context, const ::schedule::ScheduleInfo* request, ::schedule::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ScheduleService::Service::SetScheduleForWeek(::grpc::ServerContext* context, const ::schedule::ScheduleInfoContainer* request, ::schedule::OperationStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace schedule

